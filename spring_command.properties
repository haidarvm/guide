#maven step
mvn clean
mvn clean package
mvn compile
mvn package

#build package
./mvnw clean package

#run app
./mvnw spring-boot:run
mvn spring-boot:run -Drun.jvmArguments="-Xmx256m"
mvn spring-boot:run -Dspring-boot.run.arguments="--server.port=8081"
mvn spring-boot:run -Dspring-boot.run.arguments="--spring.databasource.user=gammu --spring.datasource.password=g@mm7Hay --spring.user.timezone=Asia/Jakarta""
mvn spring-boot:run

#jar spring argument
java -jar app.jar -Dspring.datasource.username=gammu -Dspring.datasource.password=g@mm7Hay 

#intellij idea put edit configuration on program arguments
--spring.datasource.password=077004g04B153

JAVA_HOME=/usr/java/jdk-11.0.4/ mvn spring-boot:run

java -jar app.jar  --server.port=80

#silent jar
#!/bin/sh
nohup java -jar ecommerce-0.0.3-SNAPSHOT.jar &

java -jar app.jar  -Dspring.user.baseurl=https://bangsawan.co.id --baseurl=https://bangsawan.co.id

java -jar app.jar --spring.config.location="application.properties"

mvn install:install-file -Dfile=ojdbc10.jar -DgroupId=com.oracle  -DartifactId=ojdbc10 -Dversion=19.3 -Dpackaging=jar

#sdk
sdk use maven

spring.resources.static-location=file:/User/XYZ/Desktop/frontend/build


#H2 remove by date from timestamp
DELETE FROM Score WHERE department_id = 1 AND  FORMATDATETIME(created, 'yyyy-MM-dd') = '2019-08-21'


#add hotswap agent
-XXaltjvm=dcevm -javaagent:/home/haidar/Downloads/app/hotswap-agent-1.3.1-SNAPSHOT.jar=autoHotswap=true

#run spring with nohup
nohup mvn spring-boot:run &

#if maven still use old java
export JAVA_HOME=/usr/java/jdk-11.0.4/


#find 
jobs -l

#kill pid


#start.sh
#!/bin/bash
mvn spring-boot:run & echo $! > ./pid.file &

#stop.sh
#!/bin/bash
kill $(cat ./pid.file)

#start_silent.sh
#!/bin/bash
nohup ./start.sh > foo.out 2> foo.err < /dev/null &


#config for oracle db
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.datasource.url=jdbc:oracle:thin:@haidar.tech:1521/xe
spring.datasource.username=haidar
#spring.datasource.password=[your-password]
spring.datasource.platform=org.hibernate.dialect.Oracle12cDialect
spring.datasource.driver-class-oracle.jdbc.driver.OracleDriver
spring.data.rest.base-path=/api/


#gradle
andy-wilkinson is correct in his answer : gradle bootRun never completes because some applications run indefinitely. Its well documented in this issue in the grails project.




I've found a way to force bootRun to live reload the application from the command line. The key items here are the gradle daemon and the spring-boot-devtools package.

To get it to live reload you need to have 2 terminals open.

gradle build --continuous

build --continuous will keep satisfying the initial build request until stopped
gradle build --continuous --quiet & 2>1 >/dev/null runs in the background, but you would miss the important build warnings/errors. gradle --stop to stop watching.

gradle bootRun

Bootrun starts with spring-boot-devtools on classpath, which will detect changes and restart application.